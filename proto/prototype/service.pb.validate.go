// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prototype/service.proto

package prototype

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddressRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddressRequestMultiError,
// or nil if none found.
func (m *AddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAddress()) != 42 {
		err := AddressRequestValidationError{
			field:  "Address",
			reason: "value length must be 42 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return AddressRequestMultiError(errors)
	}

	return nil
}

// AddressRequestMultiError is an error wrapping multiple validation errors
// returned by AddressRequest.ValidateAll() if the designated constraints
// aren't met.
type AddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressRequestMultiError) AllErrors() []error { return m }

// AddressRequestValidationError is the validation error returned by
// AddressRequest.Validate if the designated constraints aren't met.
type AddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressRequestValidationError) ErrorName() string { return "AddressRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressRequestValidationError{}

// Validate checks the field values on NumRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NumRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NumRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NumRequestMultiError, or
// nil if none found.
func (m *NumRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NumRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetNum()) < 1 {
		err := NumRequestValidationError{
			field:  "Num",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NumRequestMultiError(errors)
	}

	return nil
}

// NumRequestMultiError is an error wrapping multiple validation errors
// returned by NumRequest.ValidateAll() if the designated constraints aren't met.
type NumRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NumRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NumRequestMultiError) AllErrors() []error { return m }

// NumRequestValidationError is the validation error returned by
// NumRequest.Validate if the designated constraints aren't met.
type NumRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumRequestValidationError) ErrorName() string { return "NumRequestValidationError" }

// Error satisfies the builtin error interface
func (e NumRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNumRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumRequestValidationError{}

// Validate checks the field values on HashRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HashRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HashRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HashRequestMultiError, or
// nil if none found.
func (m *HashRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HashRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetHash()) != 66 {
		err := HashRequestValidationError{
			field:  "Hash",
			reason: "value length must be 66 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return HashRequestMultiError(errors)
	}

	return nil
}

// HashRequestMultiError is an error wrapping multiple validation errors
// returned by HashRequest.ValidateAll() if the designated constraints aren't met.
type HashRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HashRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HashRequestMultiError) AllErrors() []error { return m }

// HashRequestValidationError is the validation error returned by
// HashRequest.Validate if the designated constraints aren't met.
type HashRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HashRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HashRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HashRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HashRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HashRequestValidationError) ErrorName() string { return "HashRequestValidationError" }

// Error satisfies the builtin error interface
func (e HashRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHashRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HashRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HashRequestValidationError{}

// Validate checks the field values on BlocksStartCountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlocksStartCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlocksStartCountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlocksStartCountRequestMultiError, or nil if none found.
func (m *BlocksStartCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BlocksStartCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for Limit

	if len(errors) > 0 {
		return BlocksStartCountRequestMultiError(errors)
	}

	return nil
}

// BlocksStartCountRequestMultiError is an error wrapping multiple validation
// errors returned by BlocksStartCountRequest.ValidateAll() if the designated
// constraints aren't met.
type BlocksStartCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlocksStartCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlocksStartCountRequestMultiError) AllErrors() []error { return m }

// BlocksStartCountRequestValidationError is the validation error returned by
// BlocksStartCountRequest.Validate if the designated constraints aren't met.
type BlocksStartCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlocksStartCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlocksStartCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlocksStartCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlocksStartCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlocksStartCountRequestValidationError) ErrorName() string {
	return "BlocksStartCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BlocksStartCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlocksStartCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlocksStartCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlocksStartCountRequestValidationError{}

// Validate checks the field values on BlocksStartCountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlocksStartCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlocksStartCountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlocksStartCountResponseMultiError, or nil if none found.
func (m *BlocksStartCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BlocksStartCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BlocksStartCountResponseValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BlocksStartCountResponseValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BlocksStartCountResponseValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Error

	if len(errors) > 0 {
		return BlocksStartCountResponseMultiError(errors)
	}

	return nil
}

// BlocksStartCountResponseMultiError is an error wrapping multiple validation
// errors returned by BlocksStartCountResponse.ValidateAll() if the designated
// constraints aren't met.
type BlocksStartCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlocksStartCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlocksStartCountResponseMultiError) AllErrors() []error { return m }

// BlocksStartCountResponseValidationError is the validation error returned by
// BlocksStartCountResponse.Validate if the designated constraints aren't met.
type BlocksStartCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlocksStartCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlocksStartCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlocksStartCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlocksStartCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlocksStartCountResponseValidationError) ErrorName() string {
	return "BlocksStartCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BlocksStartCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlocksStartCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlocksStartCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlocksStartCountResponseValidationError{}

// Validate checks the field values on UTxOResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UTxOResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UTxOResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UTxOResponseMultiError, or
// nil if none found.
func (m *UTxOResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UTxOResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UTxOResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UTxOResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UTxOResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UTxOResponseMultiError(errors)
	}

	return nil
}

// UTxOResponseMultiError is an error wrapping multiple validation errors
// returned by UTxOResponse.ValidateAll() if the designated constraints aren't met.
type UTxOResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UTxOResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UTxOResponseMultiError) AllErrors() []error { return m }

// UTxOResponseValidationError is the validation error returned by
// UTxOResponse.Validate if the designated constraints aren't met.
type UTxOResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UTxOResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UTxOResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UTxOResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UTxOResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UTxOResponseValidationError) ErrorName() string { return "UTxOResponseValidationError" }

// Error satisfies the builtin error interface
func (e UTxOResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUTxOResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UTxOResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UTxOResponseValidationError{}

// Validate checks the field values on StatusResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatusResponseMultiError,
// or nil if none found.
func (m *StatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	// no validation rules for Data

	if len(errors) > 0 {
		return StatusResponseMultiError(errors)
	}

	return nil
}

// StatusResponseMultiError is an error wrapping multiple validation errors
// returned by StatusResponse.ValidateAll() if the designated constraints
// aren't met.
type StatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusResponseMultiError) AllErrors() []error { return m }

// StatusResponseValidationError is the validation error returned by
// StatusResponse.Validate if the designated constraints aren't met.
type StatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusResponseValidationError) ErrorName() string { return "StatusResponseValidationError" }

// Error satisfies the builtin error interface
func (e StatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusResponseValidationError{}

// Validate checks the field values on SendTxRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendTxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTxRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendTxRequestMultiError, or
// nil if none found.
func (m *SendTxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendTxRequestValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendTxRequestValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendTxRequestValidationError{
				field:  "Tx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendTxRequestMultiError(errors)
	}

	return nil
}

// SendTxRequestMultiError is an error wrapping multiple validation errors
// returned by SendTxRequest.ValidateAll() if the designated constraints
// aren't met.
type SendTxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTxRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTxRequestMultiError) AllErrors() []error { return m }

// SendTxRequestValidationError is the validation error returned by
// SendTxRequest.Validate if the designated constraints aren't met.
type SendTxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTxRequestValidationError) ErrorName() string { return "SendTxRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendTxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTxRequestValidationError{}

// Validate checks the field values on ErrorResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorResponseMultiError, or
// nil if none found.
func (m *ErrorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	if len(errors) > 0 {
		return ErrorResponseMultiError(errors)
	}

	return nil
}

// ErrorResponseMultiError is an error wrapping multiple validation errors
// returned by ErrorResponse.ValidateAll() if the designated constraints
// aren't met.
type ErrorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorResponseMultiError) AllErrors() []error { return m }

// ErrorResponseValidationError is the validation error returned by
// ErrorResponse.Validate if the designated constraints aren't met.
type ErrorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorResponseValidationError) ErrorName() string { return "ErrorResponseValidationError" }

// Error satisfies the builtin error interface
func (e ErrorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorResponseValidationError{}

// Validate checks the field values on BlockResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockResponseMultiError, or
// nil if none found.
func (m *BlockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBlock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BlockResponseValidationError{
					field:  "Block",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BlockResponseValidationError{
					field:  "Block",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlockResponseValidationError{
				field:  "Block",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	if len(errors) > 0 {
		return BlockResponseMultiError(errors)
	}

	return nil
}

// BlockResponseMultiError is an error wrapping multiple validation errors
// returned by BlockResponse.ValidateAll() if the designated constraints
// aren't met.
type BlockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockResponseMultiError) AllErrors() []error { return m }

// BlockResponseValidationError is the validation error returned by
// BlockResponse.Validate if the designated constraints aren't met.
type BlockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockResponseValidationError) ErrorName() string { return "BlockResponseValidationError" }

// Error satisfies the builtin error interface
func (e BlockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockResponseValidationError{}

// Validate checks the field values on TransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionResponseMultiError, or nil if none found.
func (m *TransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionResponseValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionResponseValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionResponseValidationError{
				field:  "Tx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	if len(errors) > 0 {
		return TransactionResponseMultiError(errors)
	}

	return nil
}

// TransactionResponseMultiError is an error wrapping multiple validation
// errors returned by TransactionResponse.ValidateAll() if the designated
// constraints aren't met.
type TransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionResponseMultiError) AllErrors() []error { return m }

// TransactionResponseValidationError is the validation error returned by
// TransactionResponse.Validate if the designated constraints aren't met.
type TransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionResponseValidationError) ErrorName() string {
	return "TransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionResponseValidationError{}

// Validate checks the field values on TransactionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionsResponseMultiError, or nil if none found.
func (m *TransactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTx() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransactionsResponseValidationError{
						field:  fmt.Sprintf("Tx[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransactionsResponseValidationError{
						field:  fmt.Sprintf("Tx[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionsResponseValidationError{
					field:  fmt.Sprintf("Tx[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Error

	if len(errors) > 0 {
		return TransactionsResponseMultiError(errors)
	}

	return nil
}

// TransactionsResponseMultiError is an error wrapping multiple validation
// errors returned by TransactionsResponse.ValidateAll() if the designated
// constraints aren't met.
type TransactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionsResponseMultiError) AllErrors() []error { return m }

// TransactionsResponseValidationError is the validation error returned by
// TransactionsResponse.Validate if the designated constraints aren't met.
type TransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionsResponseValidationError) ErrorName() string {
	return "TransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionsResponseValidationError{}

// Validate checks the field values on NumberResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NumberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NumberResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NumberResponseMultiError,
// or nil if none found.
func (m *NumberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NumberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Error

	if len(errors) > 0 {
		return NumberResponseMultiError(errors)
	}

	return nil
}

// NumberResponseMultiError is an error wrapping multiple validation errors
// returned by NumberResponse.ValidateAll() if the designated constraints
// aren't met.
type NumberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NumberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NumberResponseMultiError) AllErrors() []error { return m }

// NumberResponseValidationError is the validation error returned by
// NumberResponse.Validate if the designated constraints aren't met.
type NumberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumberResponseValidationError) ErrorName() string { return "NumberResponseValidationError" }

// Error satisfies the builtin error interface
func (e NumberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNumberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumberResponseValidationError{}

// Validate checks the field values on TxOptionsUnsafeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TxOptionsUnsafeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TxOptionsUnsafeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TxOptionsUnsafeRequestMultiError, or nil if none found.
func (m *TxOptionsUnsafeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TxOptionsUnsafeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fee

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxOptionsUnsafeRequestValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxOptionsUnsafeRequestValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxOptionsUnsafeRequestValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if utf8.RuneCountInString(m.GetKey()) != 66 {
		err := TxOptionsUnsafeRequestValidationError{
			field:  "Key",
			reason: "value length must be 66 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return TxOptionsUnsafeRequestMultiError(errors)
	}

	return nil
}

// TxOptionsUnsafeRequestMultiError is an error wrapping multiple validation
// errors returned by TxOptionsUnsafeRequest.ValidateAll() if the designated
// constraints aren't met.
type TxOptionsUnsafeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TxOptionsUnsafeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TxOptionsUnsafeRequestMultiError) AllErrors() []error { return m }

// TxOptionsUnsafeRequestValidationError is the validation error returned by
// TxOptionsUnsafeRequest.Validate if the designated constraints aren't met.
type TxOptionsUnsafeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxOptionsUnsafeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxOptionsUnsafeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxOptionsUnsafeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxOptionsUnsafeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxOptionsUnsafeRequestValidationError) ErrorName() string {
	return "TxOptionsUnsafeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TxOptionsUnsafeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxOptionsUnsafeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxOptionsUnsafeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxOptionsUnsafeRequestValidationError{}

// Validate checks the field values on TxOptionsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TxOptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TxOptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TxOptionsRequestMultiError, or nil if none found.
func (m *TxOptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TxOptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fee

	if utf8.RuneCountInString(m.GetAddress()) != 42 {
		err := TxOptionsRequestValidationError{
			field:  "Address",
			reason: "value length must be 42 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxOptionsRequestValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxOptionsRequestValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxOptionsRequestValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TxOptionsRequestMultiError(errors)
	}

	return nil
}

// TxOptionsRequestMultiError is an error wrapping multiple validation errors
// returned by TxOptionsRequest.ValidateAll() if the designated constraints
// aren't met.
type TxOptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TxOptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TxOptionsRequestMultiError) AllErrors() []error { return m }

// TxOptionsRequestValidationError is the validation error returned by
// TxOptionsRequest.Validate if the designated constraints aren't met.
type TxOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxOptionsRequestValidationError) ErrorName() string { return "TxOptionsRequestValidationError" }

// Error satisfies the builtin error interface
func (e TxOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxOptionsRequestValidationError{}

// Validate checks the field values on TxOptionsStakeUnsafeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TxOptionsStakeUnsafeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TxOptionsStakeUnsafeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TxOptionsStakeUnsafeRequestMultiError, or nil if none found.
func (m *TxOptionsStakeUnsafeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TxOptionsStakeUnsafeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fee

	if utf8.RuneCountInString(m.GetKey()) != 66 {
		err := TxOptionsStakeUnsafeRequestValidationError{
			field:  "Key",
			reason: "value length must be 66 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if m.GetAmount() <= 0 {
		err := TxOptionsStakeUnsafeRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNode() != "" {

	}

	if len(errors) > 0 {
		return TxOptionsStakeUnsafeRequestMultiError(errors)
	}

	return nil
}

// TxOptionsStakeUnsafeRequestMultiError is an error wrapping multiple
// validation errors returned by TxOptionsStakeUnsafeRequest.ValidateAll() if
// the designated constraints aren't met.
type TxOptionsStakeUnsafeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TxOptionsStakeUnsafeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TxOptionsStakeUnsafeRequestMultiError) AllErrors() []error { return m }

// TxOptionsStakeUnsafeRequestValidationError is the validation error returned
// by TxOptionsStakeUnsafeRequest.Validate if the designated constraints
// aren't met.
type TxOptionsStakeUnsafeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxOptionsStakeUnsafeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxOptionsStakeUnsafeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxOptionsStakeUnsafeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxOptionsStakeUnsafeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxOptionsStakeUnsafeRequestValidationError) ErrorName() string {
	return "TxOptionsStakeUnsafeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TxOptionsStakeUnsafeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxOptionsStakeUnsafeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxOptionsStakeUnsafeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxOptionsStakeUnsafeRequestValidationError{}

// Validate checks the field values on TxOptionsStakeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TxOptionsStakeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TxOptionsStakeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TxOptionsStakeRequestMultiError, or nil if none found.
func (m *TxOptionsStakeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TxOptionsStakeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fee

	if utf8.RuneCountInString(m.GetAddress()) != 42 {
		err := TxOptionsStakeRequestValidationError{
			field:  "Address",
			reason: "value length must be 42 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if m.GetAmount() <= 0 {
		err := TxOptionsStakeRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNode() != "" {

	}

	if len(errors) > 0 {
		return TxOptionsStakeRequestMultiError(errors)
	}

	return nil
}

// TxOptionsStakeRequestMultiError is an error wrapping multiple validation
// errors returned by TxOptionsStakeRequest.ValidateAll() if the designated
// constraints aren't met.
type TxOptionsStakeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TxOptionsStakeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TxOptionsStakeRequestMultiError) AllErrors() []error { return m }

// TxOptionsStakeRequestValidationError is the validation error returned by
// TxOptionsStakeRequest.Validate if the designated constraints aren't met.
type TxOptionsStakeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxOptionsStakeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxOptionsStakeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxOptionsStakeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxOptionsStakeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxOptionsStakeRequestValidationError) ErrorName() string {
	return "TxOptionsStakeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TxOptionsStakeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxOptionsStakeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxOptionsStakeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxOptionsStakeRequestValidationError{}

// Validate checks the field values on TxBodyUnsafeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TxBodyUnsafeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TxBodyUnsafeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TxBodyUnsafeResponseMultiError, or nil if none found.
func (m *TxBodyUnsafeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TxBodyUnsafeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TxBodyUnsafeResponseValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TxBodyUnsafeResponseValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TxBodyUnsafeResponseValidationError{
				field:  "Tx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TxBodyUnsafeResponseMultiError(errors)
	}

	return nil
}

// TxBodyUnsafeResponseMultiError is an error wrapping multiple validation
// errors returned by TxBodyUnsafeResponse.ValidateAll() if the designated
// constraints aren't met.
type TxBodyUnsafeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TxBodyUnsafeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TxBodyUnsafeResponseMultiError) AllErrors() []error { return m }

// TxBodyUnsafeResponseValidationError is the validation error returned by
// TxBodyUnsafeResponse.Validate if the designated constraints aren't met.
type TxBodyUnsafeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxBodyUnsafeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxBodyUnsafeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxBodyUnsafeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxBodyUnsafeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxBodyUnsafeResponseValidationError) ErrorName() string {
	return "TxBodyUnsafeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TxBodyUnsafeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxBodyUnsafeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxBodyUnsafeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxBodyUnsafeResponseValidationError{}

// Validate checks the field values on TxBodyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TxBodyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TxBodyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TxBodyResponseMultiError,
// or nil if none found.
func (m *TxBodyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TxBodyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TxBodyResponseValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TxBodyResponseValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TxBodyResponseValidationError{
				field:  "Tx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TxBodyResponseMultiError(errors)
	}

	return nil
}

// TxBodyResponseMultiError is an error wrapping multiple validation errors
// returned by TxBodyResponse.ValidateAll() if the designated constraints
// aren't met.
type TxBodyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TxBodyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TxBodyResponseMultiError) AllErrors() []error { return m }

// TxBodyResponseValidationError is the validation error returned by
// TxBodyResponse.Validate if the designated constraints aren't met.
type TxBodyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxBodyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxBodyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxBodyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxBodyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxBodyResponseValidationError) ErrorName() string { return "TxBodyResponseValidationError" }

// Error satisfies the builtin error interface
func (e TxBodyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxBodyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxBodyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxBodyResponseValidationError{}

// Validate checks the field values on RawTxRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RawTxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RawTxRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RawTxRequestMultiError, or
// nil if none found.
func (m *RawTxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RawTxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return RawTxRequestMultiError(errors)
	}

	return nil
}

// RawTxRequestMultiError is an error wrapping multiple validation errors
// returned by RawTxRequest.ValidateAll() if the designated constraints aren't met.
type RawTxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RawTxRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RawTxRequestMultiError) AllErrors() []error { return m }

// RawTxRequestValidationError is the validation error returned by
// RawTxRequest.Validate if the designated constraints aren't met.
type RawTxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RawTxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RawTxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RawTxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RawTxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RawTxRequestValidationError) ErrorName() string { return "RawTxRequestValidationError" }

// Error satisfies the builtin error interface
func (e RawTxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRawTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RawTxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RawTxRequestValidationError{}

// Validate checks the field values on ValidatorAddressesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidatorAddressesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidatorAddressesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidatorAddressesResponseMultiError, or nil if none found.
func (m *ValidatorAddressesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidatorAddressesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ValidatorAddressesResponseMultiError(errors)
	}

	return nil
}

// ValidatorAddressesResponseMultiError is an error wrapping multiple
// validation errors returned by ValidatorAddressesResponse.ValidateAll() if
// the designated constraints aren't met.
type ValidatorAddressesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidatorAddressesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidatorAddressesResponseMultiError) AllErrors() []error { return m }

// ValidatorAddressesResponseValidationError is the validation error returned
// by ValidatorAddressesResponse.Validate if the designated constraints aren't met.
type ValidatorAddressesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidatorAddressesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidatorAddressesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidatorAddressesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidatorAddressesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidatorAddressesResponseValidationError) ErrorName() string {
	return "ValidatorAddressesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidatorAddressesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidatorAddressesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidatorAddressesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidatorAddressesResponseValidationError{}
