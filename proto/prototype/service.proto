syntax = "proto3";

option go_package = "prototype/.;prototype";

package rdo.service;

import "google/protobuf/descriptor.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";
import "prototype/service.types.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// RaidoChain service for work with blockchain
service RaidoChain {

  // GetUTxO get all unspent transaction outputs of given address
  rpc GetUTxO(AddressRequest) returns (UTxOResponse){
    option (google.api.http) = {
      get: "/api/v1/chain/utxo/{address}"
    };
  }

  // GetStatus returns node status
  rpc GetStatus(google.protobuf.Empty) returns (StatusResponse) {
    option (google.api.http) = {
      get: "/api/v1/chain/status"
    };
  }

 // GetBlockByNum returns block with given number or error if not found.
  rpc GetBlockByNum(NumRequest) returns (BlockResponse) {
    option (google.api.http) = {
      get: "/api/v1/chain/block/{num}"
    };
  }

  // GetBlockByHash returns block with given hash or error if not found.
  rpc GetBlockByHash(HashRequest) returns (BlockResponse) {
    option (google.api.http) = {
      get: "/api/v1/chain/block/hash/{hash}"
    };
  }

  // GetBalance returns address balance.
  rpc GetBalance(AddressRequest) returns (NumberResponse) {
    option (google.api.http) = {
      get: "/api/v1/chain/balance/{address}"
    };
  }

  // GetTransaction returns transaction with given hash.
  rpc GetTransaction(HashRequest) returns (TransactionResponse) {
    option (google.api.http) = {
      get: "/api/v1/chain/transaction/{hash}"
    };
  }

  // GetStakeDeposits get all unspent transaction outputs of given address
  rpc GetStakeDeposits(AddressRequest) returns (UTxOResponse){
    option (google.api.http) = {
      get: "/api/v1/chain/deposits/{address}"
    };
  }

  // GetTransactionsCount get number of transactions sent by given address.
  rpc GetTransactionsCount(AddressRequest) returns (NumberResponse) {
    option (google.api.http) = {
      get: "/api/v1/chain/transaction/count/{address}"
    };
  }

  // GetBlocksStartCount gets a number of blocks starting from a specific block
  rpc GetBlocksStartCount(BlocksStartCountRequest) returns (BlocksStartCountResponse) {
    option (google.api.http) = {
      post: "/api/v1/chain/blocks/range",
      body: "*"
    };
  }

  // ListValidators returns validator addresses
  rpc ListValidators(google.protobuf.Empty) returns (ValidatorAddressesResponse) {
    option (google.api.http) = {
      get: "/api/v1/chain/list/validators",
    };
  }

  // ListValidators returns validator addresses
  rpc ListStakeValidators(google.protobuf.Empty) returns (ValidatorAddressesResponse) {
    option (google.api.http) = {
      get: "/api/v1/chain/list/stakablevalidators",
    };
  }

  // GetMarketCap returns the total amount in the system
  rpc GetMarketCap(google.protobuf.Empty) returns (MarketCapResponse) {
    option (google.api.http) = {
      get: "/api/v1/chain/info/marketcap",
    };
  }
}

// Attestation add new transactions to the pool and gossip transaction to known peers.
service Attestation {

  // SendLegacyTx send transaction data to the node.
  rpc SendLegacyTx(SendTxRequest) returns (ErrorResponse) {
    option (google.api.http) = {
      post: "/api/v1/attestation/send/legacy"
      body: "*"
    };
  }

  // SendStakeTx send stake transaction to the node.
  rpc SendStakeTx(SendTxRequest) returns (ErrorResponse) {
    option (google.api.http) = {
      post: "/api/v1/attestation/send/stake"
      body: "*"
    };
  }

  // SendUnstakeTx send stake transaction to the node.
  rpc SendUnstakeTx(SendTxRequest) returns (ErrorResponse) {
    option (google.api.http) = {
      post: "/api/v1/attestation/send/unstake"
      body: "*"
    };
  }

  // SendRawTx send raw transaction to the node.
  rpc SendRawTx(RawTxRequest) returns (ErrorResponse) {
    option (google.api.http) = {
      post: "/api/v1/attestation/send/raw"
      body: "*"
    };
  }

  // GetFee returns minimal fee price needed to add transaction to the future block.
  rpc GetFee(google.protobuf.Empty) returns (NumberResponse) {
    option (google.api.http) = {
      get: "/api/v1/attestation/fee"
    };
  }

  // GetPendingTransactions returns pending transactions list.
  rpc GetPendingTransactions(google.protobuf.Empty) returns (TransactionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/attestation/pending/transactions"
    };
  }

}

// Generator service creating new signed transactions.
service Generator {
  // UnsafeSend generates signed transaction with given options.
  rpc UnsafeSend(TxOptionsUnsafeRequest) returns (TxBodyUnsafeResponse) {
    option (google.api.http) = {
      post: "/api/v1/generate/transaction/unsafe/send"
      body: "*"
    };
  }

  // CreateStakeTx generates signed stake transaction with given options.
  rpc UnsafeStakeTx(TxOptionsStakeUnsafeRequest) returns (TxBodyUnsafeResponse) {
    option (google.api.http) = {
      post: "/api/v1/generate/transaction/unsafe/stake"
      body: "*"
    };
  }

  // CreateUnstakeTx generate signed unstake transaction with given options.
  rpc UnsafeUnstakeTx(TxOptionsStakeUnsafeRequest) returns (TxBodyUnsafeResponse) {
    option (google.api.http) = {
      post: "/api/v1/generate/transaction/unsafe/unstake"
      body: "*"
    };
  }

  // CreateSend generates signed transaction with given options.
  rpc Send(TxOptionsRequest) returns (TxBodyResponse) {
    option (google.api.http) = {
      post: "/api/v1/generate/transaction/send"
      body: "*"
    };
  }

  // CreateStakeTx generates signed stake transaction with given options.
  rpc StakeTx(TxOptionsStakeRequest) returns (TxBodyResponse) {
    option (google.api.http) = {
      post: "/api/v1/generate/transaction/stake"
      body: "*"
    };
  }

  // CreateUnstakeTx generate signed unstake transaction with given options.
  rpc UnstakeTx(TxOptionsStakeRequest) returns (TxBodyResponse) {
    option (google.api.http) = {
      post: "/api/v1/generate/transaction/unstake"
      body: "*"
    };
  }
}

message AddressRequest{
  string address = 1 [(validate.rules).string.len = 42];
}

message NumRequest{
  string num = 1 [(validate.rules).string.min_len = 1];
}

message HashRequest {
  string hash = 1 [(validate.rules).string.len = 66];
}

message BlocksStartCountRequest {
  int64 start = 1;
  uint32 limit = 2;
}

message BlocksStartCountResponse {
  repeated rdo.service.types.BlockValue blocks = 1;
  string error = 2;
}

message UTxOResponse{
  repeated rdo.service.types.UTxO data = 1;
}

message StatusResponse{
  string error = 1;
  string data = 2;
}

message SendTxRequest{
  rdo.service.types.SignedTxValue tx = 1;
}

message ErrorResponse {
  string error = 1;
}

message BlockResponse {
  rdo.service.types.BlockValue block = 1;
  string error = 2;
}

message TransactionResponse {
  rdo.service.types.TxValue tx = 1;
  string error = 2;
}

message TransactionsResponse {
  repeated rdo.service.types.TxValue tx = 1;
  string error = 2;
}

message NumberResponse {
  uint64 result = 1;
  string error = 2;
}

message TxOptionsUnsafeRequest {
   uint64 fee = 1;
   repeated rdo.service.types.TxOutputValue outputs = 2;
   string key = 3 [(validate.rules).string.len = 66];
}

message TxOptionsRequest {
  uint64 fee = 1;
  string address = 2 [(validate.rules).string.len = 42];
  repeated rdo.service.types.TxOutputValue outputs = 3;
}

message TxOptionsStakeUnsafeRequest {
  uint64 fee = 1;
  string key = 2 [(validate.rules).string.len = 66];
  uint64 amount = 3 [(validate.rules).uint64.gt = 0];
  string node = 4 [(validate.rules).string.ignore_empty = true];
}

message TxOptionsStakeRequest {
  uint64 fee = 1;
  string address = 2 [(validate.rules).string.len = 42];
  uint64 amount = 3 [(validate.rules).uint64.gt = 0];
  string node = 4 [(validate.rules).string.ignore_empty = true];
}

message TxBodyUnsafeResponse {
  rdo.service.types.SignedTxValue tx = 1;
}

message TxBodyResponse {
  rdo.service.types.NotSignedTxValue tx = 1;
}

message RawTxRequest {
  string data = 1;
}

message ValidatorAddressesResponse {
  repeated string nodes = 1;
}

message MarketCapResponse {
  uint64 cap = 1;
}

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      title: "Raido blockchain API";
      version: "1.0";
      description: "JSON REST API for Raido blockchain.";
    };
    host: "localhost:5555";
      schemes: HTTP;
      consumes: "application/json";
      consumes: "application/grpc-web-text";
      consumes: "application/grpc-web-json";
      produces: "application/json";
      produces: "application/grpc-web-text";
      produces: "application/grpc-web-json";
};